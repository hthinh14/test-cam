import streamlit as st
import cv2
import mediapipe as mp
import numpy as np
import json
import av 
from streamlit_webrtc import webrtc_streamer, VideoProcessorBase, WebRtcMode 
import joblib
import os
from collections import deque

# ==============================
# C·∫§U H√åNH C∆† B·∫¢N
# ==============================
# L∆∞u √Ω: C√°c file n√†y ph·∫£i n·∫±m trong th∆∞ m·ª•c hi·ªán t·∫°i ho·∫∑c ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi
MODEL_PATH = "softmax_model_best.pkl" # Ch·ª©a W, b, classes
SCALER_PATH = "scale.pkl"              # Ch·ª©a X_mean, X_std
LABEL_MAP_PATH = "label_map.json"

SMOOTH_WINDOW = 8
EPS = 1e-8 # D√πng 1e-8 nh∆∞ trong code hu·∫•n luy·ªán
WINDOW_SIZE = 15 # C·ª≠a s·ªï khung h√¨nh ƒë·ªÉ t√≠nh ƒë·∫∑c tr∆∞ng th·ªëng k√™

# ==============================
# H√ÄM D·ª∞ ƒêO√ÅN SOFTMAX
# ==============================
def softmax_predict(X, W, b):
    """
    Th·ª±c hi·ªán d·ª± ƒëo√°n Softmax b·∫±ng c√°c tham s·ªë W v√† b ƒë√£ t·∫£i.
    X: ƒê·∫∑c tr∆∞ng ƒë√£ ƒë∆∞·ª£c scale (shape: (n_samples, n_features))
    W: Ma tr·∫≠n tr·ªçng s·ªë (shape: (n_features, n_classes))
    b: Vector bias (shape: (1, n_classes))
    """
    logits = X @ W + b
    # T√≠nh to√°n softmax (kh√¥ng c·∫ßn thi·∫øt v√¨ ch·ªâ c·∫ßn argmax)
    # exp_z = np.exp(logits - np.max(logits, axis=1, keepdims=True))
    # y_pred = exp_z / np.sum(exp_z, axis=1, keepdims=True)
    
    # L·∫•y ch·ªâ m·ª•c l·ªõp c√≥ x√°c su·∫•t cao nh·∫•t
    return np.argmax(logits, axis=1)

@st.cache_resource
def load_assets():
    """T·∫£i tham s·ªë W, b, scaler (mean, std) v√† label map"""
    try:
        # 1. T·∫£i m√¥ h√¨nh Softmax (W v√† b)
        with open(MODEL_PATH, "rb") as f:
            model_data = joblib.load(f)
            W = model_data["W"]
            b = model_data["b"]
            # CLASSES = model_data["classes"] # C√≥ th·ªÉ d√πng ƒë·ªÉ ki·ªÉm tra

        # 2. T·∫£i scaler (mean v√† std)
        with open(SCALER_PATH, "rb") as f:
            scaler_data = joblib.load(f)
            # S·ª≠a key theo code hu·∫•n luy·ªán b·∫°n ƒë√£ g·ª≠i: X_mean v√† X_std
            mean_data = scaler_data["X_mean"] 
            std_data = scaler_data["X_std"]
            
        # 3. T·∫£i label map
        with open(LABEL_MAP_PATH, "r") as f:
            label_map = json.load(f)
        id2label = {int(v): k for k, v in label_map.items()} # ƒê·∫£m b·∫£o key l√† int
        
        # Tr·∫£ v·ªÅ c√°c tham s·ªë c·∫ßn thi·∫øt
        return W, b, mean_data, std_data, id2label

    except FileNotFoundError as e:
        st.error(f"L·ªói File: Kh√¥ng t√¨m th·∫•y file t√†i nguy√™n. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n: {e.filename}")
        st.stop()
    except KeyError as e:
        st.error(f"L·ªói Key: Ki·ªÉm tra c·∫•u tr√∫c file model/scaler (thi·∫øu key: {e}).")
        st.stop()
    except Exception as e:
        st.error(f"L·ªói Load: {e}")
        st.stop()

# T·∫£i t√†i s·∫£n (Ch·∫°y m·ªôt l·∫ßn khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng)
# ƒê√£ ƒë·ªïi t√™n bi·∫øn t·ª´ 'model'/'tree' th√†nh W, b
W, b, mean, std, id2label = load_assets() 
classes = list(id2label.values())


# ----------------------------------------------------------------------
## H√ÄM T√çNH ƒê·∫∂C TR∆ØNG (Gi·ªØ nguy√™n)
# ----------------------------------------------------------------------
mp_face_mesh = mp.solutions.face_mesh
EYE_LEFT_IDX = np.array([33, 159, 145, 133, 153, 144])
EYE_RIGHT_IDX = np.array([362, 386, 374, 263, 380, 385])
MOUTH_IDX = np.array([61, 291, 0, 17, 78, 308])

def eye_aspect_ratio(landmarks, left=True):
    idx = EYE_LEFT_IDX if left else EYE_RIGHT_IDX
    pts = landmarks[idx, :2]
    A = np.linalg.norm(pts[1] - pts[5])
    B = np.linalg.norm(pts[2] - pts[4])
    C = np.linalg.norm(pts[0] - pts[3])
    return (A + B) / (2.0 * (C + EPS))

def mouth_aspect_ratio(landmarks):
    pts = landmarks[MOUTH_IDX, :2]
    A = np.linalg.norm(pts[0] - pts[1])
    B = np.linalg.norm(pts[4] - pts[5])
    C = np.linalg.norm(pts[2] - pts[3])
    return (A + B) / (2.0 * (C + EPS))

def head_pose_yaw_pitch_roll(landmarks):
    left_eye = landmarks[33][:2]
    right_eye = landmarks[263][:2]
    nose = landmarks[1][:2]
    chin = landmarks[152][:2]
    dx = right_eye[0] - left_eye[0]
    dy = right_eye[1] - left_eye[1]
    roll = np.degrees(np.arctan2(dy, dx + EPS))
    interocular = np.linalg.norm(right_eye - left_eye) + EPS
    eyes_center = (left_eye + right_eye) / 2.0
    yaw = np.degrees(np.arctan2((nose[0] - eyes_center[0]), interocular))
    baseline = chin - eyes_center
    pitch = np.degrees(np.arctan2((nose[1] - eyes_center[1]), (np.linalg.norm(baseline) + EPS)))
    return yaw, pitch, roll

def get_extra_features(landmarks):
    nose, chin = landmarks[1], landmarks[152]
    # L∆∞u √Ω: T√≠nh to√°n z-coord c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c/·ªïn ƒë·ªãnh t·ª´ MediaPipe/Streamlit
    angle_pitch_extra = np.degrees(np.arctan2(chin[1] - nose[1], (chin[2] - nose[2]) + EPS))
    forehead_y = np.mean(landmarks[[10, 338, 297, 332, 284], 1])
    cheek_dist = np.linalg.norm(landmarks[50] - landmarks[280])
    return angle_pitch_extra, forehead_y, cheek_dist


# ----------------------------------------------------------------------
## WEBRTC VIDEO PROCESSOR (Logic x·ª≠ l√Ω Real-time)
# ----------------------------------------------------------------------
class DrowsinessProcessor(VideoProcessorBase):
    def __init__(self):
        # T·∫£i tham s·ªë Softmax
        self.W = W 
        self.b = b
        self.mean = mean
        self.std = std
        self.id2label = id2label
        self.face_mesh = mp_face_mesh.FaceMesh(max_num_faces=1, refine_landmarks=True)
        self.frame_queue = deque(maxlen=WINDOW_SIZE)
        self.pred_queue = deque(maxlen=SMOOTH_WINDOW)
        self.last_pred_label = "CH·ªú D·ªÆ LI·ªÜU" 

    def recv(self, frame: av.VideoFrame) -> av.VideoFrame:
        frame_array = frame.to_ndarray(format="bgr24")
        h, w = frame_array.shape[:2]
        rgb = cv2.cvtColor(frame_array, cv2.COLOR_BGR2RGB)
        results = self.face_mesh.process(rgb)
        
        # --- 1. TR√çCH XU·∫§T ƒê·∫∂C TR∆ØNG ---
        if results.multi_face_landmarks:
            landmarks = np.array([[p.x * w, p.y * h, p.z * w] for p in results.multi_face_landmarks[0].landmark])

            # T√≠nh 9 ƒë·∫∑c tr∆∞ng c∆° b·∫£n
            ear_l = eye_aspect_ratio(landmarks, True); ear_r = eye_aspect_ratio(landmarks, False); mar = mouth_aspect_ratio(landmarks)
            yaw, pitch, roll = head_pose_yaw_pitch_roll(landmarks)
            angle_pitch_extra, forehead_y, cheek_dist = get_extra_features(landmarks)

            feat = np.array([ear_l, ear_r, mar, yaw, pitch, roll, 
                              angle_pitch_extra, forehead_y, cheek_dist], dtype=np.float32)
            self.frame_queue.append(feat) 
            
            # --- 2. D·ª∞ ƒêO√ÅN KHI ƒê·ª¶ 30 KHUNG H√åNH ---
            if len(self.frame_queue) == WINDOW_SIZE:
                window = np.array(self.frame_queue)
                
                # T√≠nh 24 ƒë·∫∑c tr∆∞ng (gi·ªØ nguy√™n logic c·ªßa b·∫°n)
                mean_feats = window.mean(axis=0); std_feats = window.std(axis=0)
                yaw_diff = np.mean(np.abs(np.diff(window[:, 3]))); pitch_diff = np.mean(np.abs(np.diff(window[:, 4]))); roll_diff = np.mean(np.abs(np.diff(window[:, 5])))
                mar_mean = np.mean(window[:, 2]); ear_mean = np.mean((window[:, 0] + window[:, 1]) / 2.0)
                mar_ear_ratio = mar_mean / (ear_mean + EPS); yaw_pitch_ratio = np.mean(np.abs(window[:, 3])) / (np.mean(np.abs(window[:, 4])) + EPS)
                feats_24 = np.concatenate([mean_feats, std_feats, [yaw_diff, pitch_diff, roll_diff, np.max(window[:, 2]), mar_ear_ratio, yaw_pitch_ratio]])

                # Chu·∫©n h√≥a
                feats_scaled = (feats_24 - self.mean) / self.std
                
                # S·ª¨ D·ª§NG H√ÄM D·ª∞ ƒêO√ÅN SOFTMAX T·ª∞ X√ÇY D·ª∞NG
                # (ƒê·∫£m b·∫£o input c√≥ shape (1, 24) cho h√†m predict)
                pred_idx = softmax_predict(np.expand_dims(feats_scaled, axis=0), self.W, self.b)[0] 
                
                pred_label = self.id2label.get(pred_idx, f"Class {pred_idx}")
                self.pred_queue.append(pred_label)

                # X√≥a 15 khung h√¨nh c≈© (overlap)
                for _ in range(7):
                    if self.frame_queue:
                        self.frame_queue.popleft() 
        
        # --- 3. SMOOTHING ---
        if len(self.pred_queue) > 0:
            # L·∫•y nh√£n xu·∫•t hi·ªán nhi·ªÅu nh·∫•t trong c·ª≠a s·ªï l√†m m·ªãn
            self.last_pred_label = max(set(self.pred_queue), key=self.pred_queue.count)

        # --- 4. HI·ªÇN TH·ªä K·∫æT QU·∫¢ ---
        cv2.putText(frame_array, f"Trang thai: {self.last_pred_label.upper()}", (10, 70), 
                    cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 255, 0), 3)

        return av.VideoFrame.from_ndarray(frame_array, format="bgr24")

# ----------------------------------------------------------------------
## GIAO DI·ªÜN STREAMLIT CH√çNH
# ----------------------------------------------------------------------
st.set_page_config(page_title="Demo Softmax", layout="wide")
st.title("üß† Nh·∫≠n di·ªán tr·∫°ng th√°i m·∫•t t·∫≠p trung b·∫±ng m√¥ h√¨nh h·ªçc m√°y.")
st.success(f"M√¥ h√¨nh s·∫µn s√†ng! C√°c nh√£n: {classes}")
st.warning("Vui l√≤ng ch·∫•p nh·∫≠n y√™u c·∫ßu truy c·∫≠p camera t·ª´ tr√¨nh duy·ªát c·ªßa b·∫°n.")
st.markdown("---")


# Kh·ªüi t·∫°o WebRTC Streamer
webrtc_streamer(
    key="softmax_driver_live",
    mode=WebRtcMode.SENDRECV,
    # C·∫•u h√¨nh STUN servers ƒë·ªÉ thi·∫øt l·∫≠p k·∫øt n·ªëi
    rtc_configuration={"iceServers": [{"urls": ["stun:stun.l.google.com:19302"]}]},
    video_processor_factory=DrowsinessProcessor,
    media_stream_constraints={"video": True, "audio": False}, # Ch·ªâ b·∫≠t video
    async_processing=True, # Cho ph√©p x·ª≠ l√Ω kh√¥ng ƒë·ªìng b·ªô (tƒÉng t·ªëc ƒë·ªô)
)